pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "my-alpine-web-server"
        REGISTRY = "docker.io"
        REGISTRY_CREDENTIALS = "docker-credentials-id"
        DEPLOY_SERVER = "user@your-server.com"
        DEPLOY_PATH = "/path/to/deployment/directory"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout([$class: 'GitSCM', 
                          branches: [[name: '*/main']], 
                          userRemoteConfigs: [[url: 'https://github.com/sibilucky/jenkinsdocker.git', credentialsId: 'my-git-credentials']]])
            }
        }

       pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "my-alpine-web-server"
        REGISTRY = "docker.io"  
        REGISTRY_CREDENTIALS = "docker-credentials-id"  
        DEPLOY_SERVER = "user@your-server.com"  
        DEPLOY_PATH = "/path/to/deployment/directory"
    }

    stages {  
        stage('Checkout Code') {
            steps {
                git 'https://github.com/sibilucky/jenkinsdocker.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Run Docker Container for Testing') {
            steps {
                script {
                    sh "docker run -d -p 8080:80 ${DOCKER_IMAGE}"
                }
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${REGISTRY_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh "docker login -u \$DOCKER_USER -p \$DOCKER_PASS ${REGISTRY}"
                    }

                    sh "docker tag ${DOCKER_IMAGE} ${REGISTRY}/${DOCKER_IMAGE}:latest"
                    sh "docker push ${REGISTRY}/${DOCKER_IMAGE}:latest"
                }
            }
        }

        stage('Deploy to Server') {
            steps {
                script {
                    sshagent(credentials: ['your-ssh-credentials-id']) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ${DEPLOY_SERVER} "
                                docker pull ${REGISTRY}/${DOCKER_IMAGE}:latest &&
                                docker stop my-alpine-web-server || true &&
                                docker rm my-alpine-web-server || true &&
                                docker run -d --name my-alpine-web-server -p 80:80 ${REGISTRY}/${DOCKER_IMAGE}:latest
                            "
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh 'docker system prune -f'
        }
    }
}
