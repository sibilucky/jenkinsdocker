pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "my-alpine-web-server"
        REGISTRY = "docker.io"
        REGISTRY_CREDENTIALS = "docker-credentials-id"
        DEPLOY_SERVER = "user@your-server.com"
        DEPLOY_PATH = "/path/to/deployment/directory"
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo 'Checking out code from Git repository...'
                checkout([$class: 'GitSCM', 
                          branches: [[name: '*/main']], 
                          userRemoteConfigs: [[url: 'https://github.com/sibilucky/jenkinsdocker.git', credentialsId: 'my-git-credentials']]])
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    def myAlpineWebServer = 'my-alpine-web-server'
                    dockerImage = docker.build("${myAlpineWebServer}:latest")
                }
            }
        }

        stage('Verify Docker Installation') {
            steps {
                script {
                    echo 'Checking Docker version...'
                    sh 'docker --version'  // Verifies if Docker is available
                }
            }
        }

        stage('Run Docker Container for Testing') {
            steps {
                script {
                    echo 'Running Docker container for testing...'
                    sh 'set -x; docker run -d -p 8080:80 ${my-alpine-web-server}'
                }
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                script {
                    echo 'Pushing Docker image to registry...'
                    withCredentials([usernamePassword(credentialsId: "${REGISTRY_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        echo "Logging into Docker registry ${REGISTRY}..."
                        sh 'docker login -u $DOCKER_USER -p $DOCKER_PASS $REGISTRY'

                        echo "Tagging and pushing Docker image..."
                        sh 'docker tag ${DOCKER_IMAGE} ${REGISTRY}/sibisam2301/my-alpine-web-server:latest'
                        sh 'docker push ${REGISTRY}/sibisam2301/my-alpine-web-server:latest'
                    }
                }
            }
        }

        stage('Deploy to Server') {
            steps {
                script {
                    echo 'Deploying Docker container to the server...'
                    sh """
                        set -x;
                        ssh -o StrictHostKeyChecking=no ${DEPLOY_SERVER} "
                            docker pull ${REGISTRY}/sibisam2301/my-alpine-web-server:latest && 
                            docker stop my-alpine-web-server || true && 
                            docker rm my-alpine-web-server || true && 
                            docker run -d --name my-alpine-web-server -p 80:80 ${REGISTRY}/sibisam2301/my-alpine-web-server:latest
                        "
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up Docker images...'
            script {
                try {
                    sh 'docker system prune -f'
                } catch (Exception e) {
                    echo "Docker cleanup failed: ${e.getMessage()}"
                }
            }
        }
    }
}
