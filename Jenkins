pipeline {
    agent any  

    environment {
        DOCKER_IMAGE = "flask-app"
        REGISTRY = "docker.io/sibisam2301"
        REGISTRY_CREDENTIALS = "docker-credentials-id"
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo 'Checking out code from Git repository...'
                checkout([$class: 'GitSCM', 
                          branches: [[name: '*/main']], 
                          userRemoteConfigs: [[url: 'https://github.com/sibilucky/jenkinsdocker.git', credentialsId: 'my-git-credentials']]])
                sh 'ls -la'  // Verify the file structure in the workspace
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    sh 'docker --version'  // Docker version for debugging
                    sh 'docker build -t flask-app .'  
                }
            }
        }

        stage('Run Docker Container for Testing') {
            steps {
                script {
                    echo 'Running Docker container for testing...'
                    sh 'docker run -d -p 5002:5000 flask-app'
                }
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: REGISTRY_CREDENTIALS, 
                                                      usernameVariable: 'sibisam2301@gmail.com', 
                                                      passwordVariable: 'devika@123')]) {
                        echo "Logging into Docker registry ${REGISTRY}..."
                        sh """
                            echo devika@123 | docker login -u sibisam2301@gmail.com --password-stdin
                            docker tag ${DOCKER_IMAGE}:latest ${REGISTRY}/flask-app:latest
                            docker push ${REGISTRY}/flask-app:latest
                        """
                    }
                }
            }
        }

        stage('Deploy to Server') {
            steps {
                script {
                    echo 'Deploying Docker container to the server...'
                    sh """
                        docker pull ${REGISTRY}/flask-app:latest
                        docker stop flask-app || true
                        docker rm flask-app || true
                        docker run -d --name my-flask-app -p 5003:5000 ${REGISTRY}/flask-app:latest
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up Docker images...'
            script {
                try {
                    sh 'docker system prune -af'  // Cleanup Docker images
                } catch (Exception e) {
                    echo "Docker cleanup failed: ${e.getMessage()}"
                }
            }
        }
    }
}

