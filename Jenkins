pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "my-alpine-web-server"
        REGISTRY = "docker.io"
        REGISTRY_CREDENTIALS = "docker-credentials-id"
        DEPLOY_SERVER = "user@your-server.com"
        DEPLOY_PATH = "/path/to/deployment/directory"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout([$class: 'GitSCM', 
                          branches: [[name: '*/main']], 
                          userRemoteConfigs: [[url: 'https://github.com/sibilucky/jenkinsdocker.git', credentialsId: 'my-git-credentials']]])
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t my-alpine-web-server .'
                }
            }
        }

        stage('Run Docker Container for Testing') {
            steps {
                script {
                    sh 'docker run -d -p 8080:80 my-alpine-web-server'
                }
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${REGISTRY_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'docker login -u $DOCKER_USER -p $DOCKER_PASS docker.io'
                    }
                    sh 'docker tag  my-alpine-web-serverdocker.io/sibisam2301/my-alpine-web-server:latest'
                    sh 'docker push docker.io/sibisam2301/my-alpine-web-server:latest'
                }
            }
        }

        stage('Deploy to Server') {
            steps {
                script {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${DEPLOY_SERVER} "
                            docker pull docker.io/sibisam2301/my-alpine-web-server:latest &&
                            docker stop my-alpine-web-server  || true &&
                            docker rm my-alpine-web-server || true &&
                            docker run -d --name my-alpine-web-server -p 80:80 docker.io/sibisam2301/my-alpine-web-server:latest
                        "
                    """
                }
            }
        }
    }
    
    post {
        always {
            sh 'docker system prune -f'
        }
    }
}
