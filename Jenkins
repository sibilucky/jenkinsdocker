pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "my-app"
        REGISTRY = "docker.io"  
        REGISTRY_CREDENTIALS = "docker-credentials-id"  
        DEPLOY_SERVER = "user@your-server.com"  
        DEPLOY_PATH = "/path/to/deployment/directory"
    }

   stage('Checkout Code') {
    steps {
        script {

            checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'demo', url: 'https://github.com/sibilucky/jenkinsdocker.git']])
        }
    }
}

   
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image from the Dockerfile in your repo
                    sh 'docker build -t my-alpine-web-server .'
                }
            }
        }

        stage('Run Docker Container for Testing') {
            steps {
                script {
                    // Run the container (e.g., for tests, linting, etc.)
                    sh 'docker run -d -p 8080:80 my-alpine-web-server'
                }
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                script {
                    // Log in to Docker registry
                    withCredentials([usernamePassword(credentialsId: "${REGISTRY_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'docker login -u $DOCKER_USER -p $DOCKER_PASS ${REGISTRY}'
                    }

                    // Tag and push the Docker image
                    sh 'docker tag my-alpine-web-server sibisam2301/my-alpine-web-server:latest'
                    sh 'docker push sibisam2301/my-alpine-web-server:latest'
                }
            }
        }

        stage('Deploy to Server') {
            steps {
                script {
                    // SSH into the deployment server and restart the Docker container
                    sh """
                        ssh -o StrictHostKeyChecking=no ${DEPLOY_SERVER} "
                            docker pull sibisam2301/my-alpine-web-server:latest &&
                            docker stop my-alpine-web-server || true &&
                            docker rm my-alpine-web-server || true &&
                            docker run -d --name my-alpine-web-server -p 80:80 sibisam2301/my-alpine-web-server:latest
                        "
                    """
                }
            }
        }
    }
    
    post {
        always {
            // Cleanup Docker images after pipeline finishes
            sh 'docker system prune -f'
        }
    }
}
